"""Create topics table

Revision ID: 73c8c5bda91e
Revises: 73ad4ef4cbe7
Create Date: 2025-04-12 12:31:36.939018

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '73c8c5bda91e'
down_revision: Union[str, None] = '73ad4ef4cbe7'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('submissions')
    op.drop_table('users')
    op.drop_table('topics')
    op.drop_table('questions')
    op.drop_table('game_questions')
    op.drop_table('participations')
    op.drop_table('options')
    op.drop_table('games')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('games',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('games_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=1000), autoincrement=False, nullable=False),
    sa.Column('topic_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('score', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name='games_owner_id_fkey'),
    sa.ForeignKeyConstraint(['topic_id'], ['topics.id'], name='games_topic_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='games_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('options',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('options_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('question_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('is_correct', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], name='options_question_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='options_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('participations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('game_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('gained_score', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('registered_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['game_id'], ['games.id'], name='participations_game_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='participations_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='participations_pkey')
    )
    op.create_table('game_questions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('game_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('question_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['game_id'], ['games.id'], name='game_questions_game_id_fkey'),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], name='game_questions_question_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='game_questions_pkey')
    )
    op.create_table('questions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('questions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('topic_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name='questions_owner_id_fkey'),
    sa.ForeignKeyConstraint(['topic_id'], ['topics.id'], name='questions_topic_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='questions_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('topics',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('topics_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='topics_pkey'),
    sa.UniqueConstraint('name', name='topics_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=32), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(length=32), autoincrement=False, nullable=True),
    sa.Column('birthdate', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('joined_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_staff', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_superuser', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key'),
    sa.UniqueConstraint('username', name='users_username_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('submissions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('question_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('option_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_correct', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['option_id'], ['options.id'], name='submissions_option_id_fkey'),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], name='submissions_question_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='submissions_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='submissions_pkey')
    )
    # ### end Alembic commands ###
